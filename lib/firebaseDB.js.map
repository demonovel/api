{"version":3,"file":"firebaseDB.js","sourceRoot":"","sources":["firebaseDB.ts"],"names":[],"mappings":";AAAA;;GAEG;;;;;AAEH,wDAAgC;AAChC,6DAA6E;AAC7E,iCAAiD;AAGjD,MAAM,GAAG,GAAG,kBAAQ,CAAC,aAAa,CAAC;IAClC,WAAW,EAAE,OAAO,CAAC,GAAG,CAAC,eAAe;IACxC,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU;CAC9B,CAAC,CAAC;AAEH,IAAI,QAAoC,CAAC;AACzC,IAAI,EAA6B,CAAC;AAElC,MAAM,GAAG,GAAQ;IAEhB,KAAK,CAAC,KAAK;QAEV,IAAI,CAAC,QAAQ,EACb;YACC,QAAQ,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;YAC1B,EAAE,GAAG,0CAAoB,CAAU,QAAQ,CAAC,CAAC;SAC7C;QACD,MAAM,QAAQ,CAAC,QAAQ,EAAE,CAAC;IAC3B,CAAC;IAED,KAAK,CAAC,IAAI;QAET,IAAI,QAAQ,EACZ;YACC,MAAM,QAAQ,CAAC,SAAS,EAAE,CAAC;SAC3B;IACF,CAAC;IAED,KAAK,CAAC,GAAG,CAAC,MAAc,EAAE,MAAc;QAEvC,kBAAW,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAE5B,MAAM,GAAG,CAAC,KAAK,EAAE,CAAC;QAElB,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;aAC7B,IAAI,CAAC,IAAI,CAAC,EAAE;YACZ,IAAI,CAAC,IAAI,EACT;gBACC,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,MAAM,MAAM,MAAM,sBAAsB,CAAC,CAAA;aACnE;YAED,OAAO,IAAI,CAAA;QACZ,CAAC,CAAC,CAAA;IACJ,CAAC;IACD,KAAK,CAAC,GAAG,CAAC,MAAc,EAAE,MAAc,EAAE,IAAW;QAEpD,kBAAW,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAC5B,iBAAU,CAAC,IAAI,CAAC,CAAC;QAEjB,MAAM,GAAG,CAAC,KAAK,EAAE,CAAC;QAElB,aAAa;QACb,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE,IAAI,CAAC;aACnC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAA;IAClB,CAAC;CAED,CAAC;AAEF,kBAAe,GAAG,CAAA","sourcesContent":["/**\n * Created by user on 2020/3/1.\n */\n\nimport firebase from \"firebase\";\nimport { wrapFirebaseDatabase, RealtimeDatabase } from \"realtime-db-adaptor\";\nimport { assertData, assertDBKey } from './util';\nimport { ISchema, IData, IDB } from './types';\n\nconst app = firebase.initializeApp({\n\tdatabaseURL: process.env.MY_DATABASE_URL,\n\tapiKey: process.env.MY_API_KEY,\n});\n\nlet database: firebase.database.Database;\nlet db: RealtimeDatabase<ISchema>;\n\nconst api = <IDB>{\n\n\tasync start()\n\t{\n\t\tif (!database)\n\t\t{\n\t\t\tdatabase = app.database();\n\t\t\tdb = wrapFirebaseDatabase<ISchema>(database);\n\t\t}\n\t\tawait database.goOnline();\n\t},\n\n\tasync stop()\n\t{\n\t\tif (database)\n\t\t{\n\t\t\tawait database.goOffline();\n\t\t}\n\t},\n\n\tasync get(siteID: string, hashID: string): Promise<IData>\n\t{\n\t\tassertDBKey(siteID, hashID);\n\n\t\tawait api.start();\n\n\t\treturn db.get([siteID, hashID])\n\t\t\t.then(data => {\n\t\t\t\tif (!data)\n\t\t\t\t{\n\t\t\t\t\treturn Promise.reject(`'${siteID}' '${hashID}' data is not exists`)\n\t\t\t\t}\n\n\t\t\t\treturn data\n\t\t\t})\n\t},\n\tasync set(siteID: string, hashID: string, data: IData): Promise<IData>\n\t{\n\t\tassertDBKey(siteID, hashID);\n\t\tassertData(data);\n\n\t\tawait api.start();\n\n\t\t// @ts-ignore\n\t\treturn db.set([siteID, hashID], data)\n\t\t\t.then(e => data)\n\t},\n\n};\n\nexport default api\n"]}