{"version":3,"file":"fileDB.js","sourceRoot":"","sources":["fileDB.ts"],"names":[],"mappings":";;AAAA,+BAAqC;AACrC,uCAAgD;AAGhD,iCAAiD;AAEjD,IAAI,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,IAAA,WAAI,EAAC,MAAM,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,IAAA,cAAO,EAAC,SAAS,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;AAEpH,SAAS,SAAS,CAAC,UAAkB;IAEpC,OAAO,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,CAAA;AACxC,CAAC;AAED,IAAI,EAAE,GAAG,eAAe,CAAC;AAEzB,SAAS,WAAW,CAAC,MAAc,EAAE,MAAc;IAElD,IAAI,UAAU,GAAG,IAAA,cAAO,EAAC,SAAS,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IAEpD,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,EAChE;QACC,MAAM,IAAI,KAAK,CAAC,WAAW,MAAM,MAAM,MAAM,GAAG,CAAC,CAAA;KACjD;IAED,OAAO,UAAU,CAAA;AAClB,CAAC;AAED,kBAAoB;IAEnB,KAAK,CAAC,KAAK,KAAI,CAAC;IAEhB,KAAK,CAAC,IAAI,KAAI,CAAC;IAEf,KAAK,CAAC,GAAG,CAAC,MAAc,EAAE,MAAc;QAEvC,IAAA,kBAAW,EAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAE5B,OAAO,IAAA,mBAAQ,EAAC,WAAW,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAA;IAC7C,CAAC;IACD,KAAK,CAAC,GAAG,CAAC,MAAc,EAAE,MAAc,EAAE,IAAS,EAAE,IAAiB;QAErE,IAAA,kBAAW,EAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAC5B,IAAA,iBAAU,EAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAEvB,OAAO,IAAA,qBAAU,EAAC,WAAW,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE,IAAI,CAAC;aAClD,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CACf;IACH,CAAC;CACD,CAAA","sourcesContent":["import { resolve, join } from \"path\";\nimport { readJSON, outputJSON } from 'fs-extra';\nimport { EnumApiType, IData, IDB, ISchema } from './types';\nimport { wrapFirebaseDatabase } from 'realtime-db-adaptor';\nimport { assertData, assertDBKey } from './util';\n\nlet cacheRoot = process.env.IS_REMOTE ? join('/tmp', '.cache', 'file') : resolve(__dirname, '..', '.cache', 'file');\n\nfunction checkPath(targetPath: string)\n{\n\treturn targetPath.startsWith(cacheRoot)\n}\n\nlet re = /[^a-z0-9_\\-]/i;\n\nfunction resolvePath(siteID: string, hashID: string)\n{\n\tlet targetPath = resolve(cacheRoot, siteID, hashID);\n\n\tif (!checkPath(targetPath) || re.test(siteID) || re.test(hashID))\n\t{\n\t\tthrow new Error(`不合法的請求 '${siteID}' '${hashID}'`)\n\t}\n\n\treturn targetPath\n}\n\nexport default <IDB>{\n\n\tasync start() {},\n\n\tasync stop() {},\n\n\tasync get(siteID: string, hashID: string): Promise<IData>\n\t{\n\t\tassertDBKey(siteID, hashID);\n\n\t\treturn readJSON(resolvePath(siteID, hashID))\n\t},\n\tasync set(siteID: string, hashID: string, data: any, type: EnumApiType): Promise<IData>\n\t{\n\t\tassertDBKey(siteID, hashID);\n\t\tassertData(data, type);\n\n\t\treturn outputJSON(resolvePath(siteID, hashID), data)\n\t\t\t.then(e => data)\n\t\t\t;\n\t},\n}\n"]}